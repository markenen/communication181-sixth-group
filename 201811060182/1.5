//多项式计算器
#include <iostream>
#include <string>
#include <stdlib.h>
#include <stack>
using namespace std;
const int MAX = 30;
const int DONE = 1;
//栈定义 
template <class T>
class Stack 
{
public:
	Stack(int MaxSize = 10);
	~Stack();
	bool IsEmpty() const; //判断栈空
	bool IsFull() const;  //判断栈满
	T Top() const; //获取栈顶元素
	void Push(const T& data_item); //增加栈顶元素
	void Pop(T& data_item); //删除栈顶元素
	void MakeEmpty() { top = -1; } //清空栈
	void print();
private:
	int top;//栈顶
	int MaxTop;//最大的栈顶值
	T* data;//栈元素数组
};
template<typename T>
Stack<T>::Stack(int MaxSize) 
{
	MaxTop = MaxSize - 1;
	data = new T[MaxSize];
	top = -1;
}
template<typename T>
Stack<T>::~Stack()
{
	delete[] data;
}
template<typename T>
bool Stack<T>::IsEmpty() const
{
	return top == -1;
}
template<typename T>
bool Stack<T>::IsFull() const
{
	return top == MaxTop;
}
template<typename T>
void Stack<T>::Push(const T& data_item)
{
	if (IsFull())
	{
		cout << "no memory;" << endl;
	}
	top = top + 1;
	data[top] = data_item;
}
template<typename T>
void Stack<T>::Pop(T& data_item) 
{
	if (IsEmpty())
	{
		cout << "no element" << endl; 
	}
	data_item = data[top];
	top = top - 1;
}
template<typename T>
T Stack<T>::Top() const 
{
	return data[top];
}
template<typename T>
void Stack<T>::print()
{
	for (int i = 0; i < top + 1; i++)
	{
		cout << data[i] << '\t';
	}
	cout << endl;
}
//判断一个字符是否为数字
bool IsNum(char c) 
{
	if (c >= '0' && c <= '9' )
		return true;
	else
		return false;
}
//删除字符串中的空格 
void DeleteBlank(string& s) 
{
	string::iterator i = s.begin();
	while ((i = find(i, s.end(), ' ')) != s.end())
		s.erase(i);
}
//计算器
class Calculator //定义一个计算器类
{
public:
	Calculator(string s);
	~Calculator(); //默认构造函数
	int OutPriority(char symble);      //返回栈外优先级
	int InPriority(char symble);       //返回栈内优先级 
	bool JudgePriority(char out, char in);  //判断优先级 前一个为栈外符号，后一个为栈内符号 若前大于后返回1，否则返回0 
	int JudgePriority(char symble);         //判断运算符  若是'#'返回 -1，若是')'返回 0，否则返回 1 
	void DealNum(); 	    //处理数据	
	int calculate();            //计算 
	void SetString(string const s);
private:
	Stack<char>* s_sym;         //符号栈 
	Stack<int>* s_num;          //数据栈 
	string s;
};
Calculator::Calculator(string s) 
{
	this->s = '#' + s + '#';
	DeleteBlank(this->s);
	s_sym = new Stack<char>(MAX);
	s_num = new Stack<int>(MAX);
}
Calculator::~Calculator() 
{
	delete s_sym;
	delete s_num;
}
int Calculator::OutPriority(char symble) 
{
	switch (symble) 
	{
	case '#':
		return 0;
	case '(':
		return 8;
	case '+':
		return 2;
	case '-':
		return 2;
	case '*':
		return 4;
	case '/':
		return 4;
	case '%':
		return 4;
	case '^':
		return 6;
	case ')':
		return 1;
	default:
		throw 1;
	}
}
int Calculator::InPriority(char symble) 
{
	switch (symble) 
	{
	case '#':
		return 0;
	case '(':
		return 1;
	case '+':
		return 3;
	case '-':
		return 3;
	case '*':
		return 5;
	case '/':
		return 5;
	case '%':
		return 5;
	case '^':
		return 7;
	case ')':
		return 8;
	default:
		throw 1;
	}
}
bool Calculator::JudgePriority(char out, char in) 
{
	if (OutPriority(out) > InPriority(in))
		return true;
	else
		return false;
}
int Calculator::JudgePriority(char symble) 
{
	if (symble == '#')
		return -1;
	else if (symble == ')')
		return 0;
	else
		return 1;
}
void Calculator::DealNum() 
{
	//将数据栈中的前两个弹出进行计算，结果放回数据栈，符号栈弹出顶部元素 
	char temp = 0;
	int temp1 = 0;
	int temp2 = 0;
	s_sym->Pop(temp);
	s_num->Pop(temp1);
	s_num->Pop(temp2);
	switch (temp) 
	{
	case '+':
		temp2 += temp1;
		break;
	case '-':
		temp2 = temp2 - temp1;
		break;
	case '*':
		temp2 = temp2 * temp1;
		break;
	case '/':
		if (temp1 == 0)
			throw 0;
		else
			temp2 = temp2 / temp1;
		break;
	case '%':
		temp2 = temp2 % temp1;
		break;
	case '^':
		temp2 = pow(temp2, temp1);
		break;
	default:
		throw 1;
	}
	s_num->Push(temp2);
}
int Calculator::calculate() 
{
	for (int i = 0; i < s.size(); i++) 
	{   //遍历字符串 
		if (IsNum(s[i])) 
		{
			int temp = (int)(s[i]) - 48;  //char强制类型转换为int ASCII码数值，减 48 转换为对应整数值 
			int _temp = 0;
			if (i > 0 && IsNum(s[i - 1])) 
			{
				s_num->Pop(_temp);
				temp = _temp * 10 + temp;
			}
			s_num->Push(temp);
		}
		else {
			char temp = s[i];
			if (s_sym->IsEmpty()) 
			{
				s_sym->Push(temp);
			}
			else 
			{
				if (JudgePriority(temp, s_sym->Top())) 
				{
					s_sym->Push(temp);
				}
				else   if (JudgePriority(temp) == 1)  //栈外优先级小于栈内优先级，且不为 '#' 和 ')' 
				{         
					while (!JudgePriority(temp, s_sym->Top())) //当栈外优先级比栈内优先级低时，执行栈内符号运算
					{  
						DealNum();
					}
					s_sym->Push(temp);

				}
				else if (JudgePriority(temp) == -1) 
				{
					while (s_sym->Top() != '#') 
					{
						DealNum();
					}
					int result = s_num->Top();
					s_sym->MakeEmpty();
					s_num->MakeEmpty();
					return result;
				}
				else if (JudgePriority(temp) == 0) 
				{
					while (s_sym->Top() != '(') 
					{
						DealNum();
					}
					s_sym->Pop(temp);
				}
			}
		}
	}
}
void Calculator::SetString(string const s)
{
	this->s = '#' + s + '#';
	DeleteBlank(this->s);   //删除字符串中的空格 
}
int main(int argc, char** argv) 
{
	try 
	{
		string s = "";
		Calculator c(s);
		while (DONE) 
		{
			s = "";			
			getline(cin, s);
			c.SetString(s);
			int result = 0;
			result = c.calculate();
			cout << c.calculate() << endl;
			system("pause");
			system("cls");
		}
	}
	catch (int i) 
	{
		if (i == 0)
			cout << "除数不能为0！";
		else if (i == 1)
			cout << "存在无法识别的符号！" << endl;
	}
	return 0;
}
